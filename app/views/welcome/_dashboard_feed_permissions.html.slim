table.table.table-condensed.table-striped#feed-permissions
	thead
		tr
			th Name
			th Email
			th Role
	tbody
		- User.where(admin: false).each do |u|
			- perm = Permission.where(feed_id: @feed, user_id: u).first || Permission.new(feed_id: @feed, user_id: u, role: Permission::NO_ROLE)
			- puts "PERM #{perm}"
			tr
				td = u.name
				td = u.email
				td 
					= semantic_form_for perm, :url => grant_feed_path(@feed, user_id: u.id, :format => :json), :remote => true do |f|
						/ .btn-group data-toggle="buttons-radio"
						label.radio
							= radio_button 'user', 'role', Permission::NO_ROLE, checked: perm.role == Permission::NO_ROLE
							| No Access
						label.radio
							= radio_button 'user', 'role', Permission::PUBLISHER_ROLE, checked: perm.role == Permission::PUBLISHER_ROLE
							| Publisher
						label.radio
							= radio_button 'user', 'role', Permission::SUBSCRIBER_ROLE, checked: perm.role == Permission::SUBSCRIBER_ROLE
							| Subscriber


h2 Administrators
p BitTorious administrators always have access, so you don't need to explicitly authorize them! 
ul
	- User.where(admin: true).each do |u|
		li = u.email